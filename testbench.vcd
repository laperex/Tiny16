$date
	Sun Nov 26 20:28:09 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 8 ! ram_write_bus [7:0] $end
$var wire 8 " ram_read_bus [7:0] $end
$var wire 4 # psr_bus [3:0] $end
$var wire 8 $ mar [7:0] $end
$var wire 16 % decode [15:0] $end
$var wire 3 & counter [2:0] $end
$var wire 8 ' alu_out_bus [7:0] $end
$var wire 8 ( accumulator_bus [7:0] $end
$var wire 1 ) RI $end
$var wire 1 * PS $end
$var wire 1 + PI $end
$var wire 1 , MI $end
$var wire 1 - LS $end
$var wire 4 . L [3:0] $end
$var wire 1 / II $end
$var wire 1 0 ES $end
$var wire 1 1 C_in $end
$var wire 1 2 AS $end
$var wire 1 3 AI $end
$var parameter 32 4 WIDTH $end
$var reg 1 5 clk $end
$var reg 8 6 inst [7:0] $end
$var reg 1 7 reset $end
$scope module alu $end
$var wire 1 5 clk $end
$var wire 1 7 reset $end
$var wire 9 8 tE [8:0] $end
$var wire 8 9 lB [7:0] $end
$var wire 8 : lA [7:0] $end
$var wire 1 * PS $end
$var wire 1 + PI $end
$var wire 1 - LS $end
$var wire 4 ; L [3:0] $end
$var wire 8 < E [7:0] $end
$var wire 1 1 Cn $end
$var wire 8 = B [7:0] $end
$var wire 8 > A [7:0] $end
$var parameter 32 ? WIDTH $end
$var reg 4 @ psr [3:0] $end
$scope begin genblk1[0] $end
$var parameter 2 A i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 B i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 C i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 D i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 E i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 F i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 G i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 H i $end
$upscope $end
$upscope $end
$scope module cu $end
$var wire 1 I TYPE_ABS $end
$var wire 1 J TYPE_IMM $end
$var wire 1 K TYPE_OFF $end
$var wire 1 L TYPE_REG $end
$var wire 1 5 clk $end
$var wire 8 M inst [7:0] $end
$var wire 1 7 reset $end
$var wire 6 N opcode [5:0] $end
$var wire 16 O decode [15:0] $end
$var wire 1 ) cRI $end
$var wire 1 * cPS $end
$var wire 1 + cPI $end
$var wire 1 , cMI $end
$var wire 1 - cLS $end
$var wire 4 P cL [3:0] $end
$var wire 1 / cII $end
$var wire 1 0 cES $end
$var wire 1 1 cCn $end
$var wire 1 2 cAS $end
$var wire 1 3 cAI $end
$var parameter 32 Q AI $end
$var parameter 33 R AS $end
$var parameter 14 S BUF_A $end
$var parameter 14 T BUF_B $end
$var parameter 39 U Cn $end
$var parameter 38 V ES $end
$var parameter 40 W GEN_0 $end
$var parameter 40 X GEN_1 $end
$var parameter 41 Y II $end
$var parameter 40 Z LS $end
$var parameter 36 [ MI $end
$var parameter 14 \ NEG_A $end
$var parameter 14 ] NEG_B $end
$var parameter 34 ^ PI $end
$var parameter 35 _ PS $end
$var parameter 37 ` RI $end
$var parameter 6 a add $end
$var parameter 6 b addc $end
$var parameter 6 c jump $end
$var parameter 6 d jumpc $end
$var parameter 6 e jumpn $end
$var parameter 6 f jumpz $end
$var parameter 6 g load $end
$var parameter 6 h loadi $end
$var parameter 6 i store $end
$var parameter 6 j sub $end
$var parameter 6 k subb $end
$var reg 3 l counter [2:0] $end
$upscope $end
$scope module ram $end
$var wire 1 , MI $end
$var wire 1 ) RI $end
$var wire 1 5 clk $end
$var wire 8 m mar [7:0] $end
$var wire 8 n read [7:0] $end
$var wire 1 7 reset $end
$var wire 8 o write [7:0] $end
$var parameter 32 p WIDTH $end
$var parameter 38 q abs $end
$var parameter 5 r adc $end
$var parameter 38 s adca $end
$var parameter 5 t add $end
$var parameter 38 u adda $end
$var parameter 32 v count $end
$var parameter 32 w first $end
$var parameter 38 x imm $end
$var parameter 5 y jump $end
$var parameter 5 z jumpc $end
$var parameter 5 { jumpn $end
$var parameter 5 | jumpz $end
$var parameter 38 } loada $end
$var parameter 5 ~ loadi $end
$var parameter 38 !" off $end
$var parameter 5 "" sbb $end
$var parameter 38 #" sbba $end
$var parameter 32 $" second $end
$var parameter 38 %" store $end
$var parameter 5 &" sub $end
$var parameter 38 '" suba $end
$var parameter 32 (" tmp $end
$var reg 8 )" mem_addr_reg [7:0] $end
$var integer 32 *" finish [31:0] $end
$var integer 32 +" i [31:0] $end
$var integer 32 ," org [31:0] $end
$var integer 32 -" start [31:0] $end
$upscope $end
$scope module rega_mux $end
$var wire 1 5 clk $end
$var wire 1 3 enable $end
$var wire 8 ." in0 [7:0] $end
$var wire 8 /" in1 [7:0] $end
$var wire 1 7 reset $end
$var wire 1 2 sel $end
$var parameter 32 0" WIDTH $end
$var reg 8 1" out [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 0"
b1010 ("
b1001011 '"
b1011 &"
b1000010 %"
b1100 $"
b1001010 #"
b1010 ""
b10000000 !"
b1 ~
b1000001 }
b101 |
b111 {
b110 z
b100 y
b0 x
b1011 w
b1101 v
b1001000 u
b1000 t
b1001001 s
b1001 r
b1000000 q
b1000 p
b1010 k
b1011 j
b10 i
b1 h
b1 g
b101 f
b111 e
b110 d
b100 c
b1001 b
b1000 a
b100000 `
b1000 _
b100 ^
b1010000000000 ]
b110000000000 \
b10000 [
b100000000 Z
b1000000000 Y
b11110100000000 X
b100000000 W
b1000000 V
b10000000 U
b10100000000000 T
b11000000000000 S
b10 R
b1 Q
b111 H
b110 G
b101 F
b100 E
b11 D
b10 C
b1 B
b0 A
b1000 ?
b1000 4
$end
#0
$dumpvars
b0 1"
b0 /"
b1100011 ."
b1100100 -"
b1101010 ,"
b10000000 +"
b1101000 *"
b0 )"
b0 o
b1100011 n
b0 m
b0 l
b0 P
b100010000 O
b0 N
b0 M
0L
0K
1J
0I
b0 @
b0 >
b1100011 =
b0 <
b0 ;
b0 :
b0 9
b0 8
17
b0 6
05
03
02
01
00
0/
b0 .
1-
1,
0+
0*
0)
b0 (
b0 '
b0 &
b100010000 %
b0 $
b0 #
b1100011 "
b0 !
$end
#10
07
15
#20
b1100011 9
b1100100 !
b1100100 o
b1100100 /"
b1100100 '
b1100100 <
b1100100 8
b1010 .
b1010 ;
b1010 P
1)
11
b10100110110000 %
b10100110110000 O
b1 &
b1 l
05
#30
b1000010 !
b1000010 o
b1000010 /"
b1000010 '
b1000010 <
b1000010 8
b1000001 9
b1000001 "
b1000001 =
b1000001 n
b1000001 ."
b1100100 $
b1100100 m
b1100100 )"
15
#40
b0 9
b0 !
b0 o
b0 /"
b0 '
b0 <
b0 8
b0 .
b0 ;
b0 P
0)
01
1/
b1100010000 %
b1100010000 O
b10 &
b10 l
05
#50
0J
1I
b1 N
b1100100 "
b1100100 =
b1100100 n
b1100100 ."
b0 $
b0 m
b0 )"
b1000001 6
b1000001 M
15
#60
b1100100 9
b1100101 !
b1100101 o
b1100101 /"
b1100101 '
b1100101 <
b1100101 8
b1010 .
b1010 ;
b1010 P
1)
11
0/
b10100110110000 %
b10100110110000 O
b11 &
b11 l
05
#70
b1110 !
b1110 o
b1110 /"
b1110 '
b1110 <
b1110 8
b1101 9
b1101 "
b1101 =
b1101 n
b1101 ."
b1100101 $
b1100101 m
b1100101 )"
15
#80
b1101 !
b1101 o
b1101 /"
b1101 '
b1101 <
b1101 8
0)
01
b10100100010000 %
b10100100010000 O
b100 &
b100 l
05
#90
b1010 !
b1010 o
b1010 /"
b1010 '
b1010 <
b1010 8
b1010 9
b1010 "
b1010 =
b1010 n
b1010 ."
b1101 $
b1101 m
b1101 )"
15
#100
b0 !
b0 o
b0 /"
b0 '
b0 <
b0 8
b0 9
b0 .
b0 ;
b0 P
13
0,
0-
b1 %
b1 O
b101 &
b101 l
05
#110
b1010 !
b1010 o
b1010 /"
b1010 '
b1010 <
b1010 8
b1010 :
b1010 (
b1010 >
b1010 1"
15
#120
03
b0 %
b0 O
b110 &
b110 l
05
#130
15
#140
b111 &
b111 l
05
#150
15
#160
b0 !
b0 o
b0 /"
b0 '
b0 <
b0 8
b0 :
1,
1-
b100010000 %
b100010000 O
b0 &
b0 l
05
#170
b1100101 "
b1100101 =
b1100101 n
b1100101 ."
b0 $
b0 m
b0 )"
15
#180
b1100101 9
b1100110 !
b1100110 o
b1100110 /"
b1100110 '
b1100110 <
b1100110 8
b1010 .
b1010 ;
b1010 P
1)
11
b10100110110000 %
b10100110110000 O
b1 &
b1 l
05
#190
b1100 !
b1100 o
b1100 /"
b1100 '
b1100 <
b1100 8
b1011 9
b1011 "
b1011 =
b1011 n
b1011 ."
b1100110 $
b1100110 m
b1100110 )"
15
#200
b0 9
b0 !
b0 o
b0 /"
b0 '
b0 <
b0 8
b0 .
b0 ;
b0 P
0)
01
1/
b1100010000 %
b1100010000 O
b10 &
b10 l
05
#210
1J
0I
b1011 N
b1100110 "
b1100110 =
b1100110 n
b1100110 ."
b0 $
b0 m
b0 )"
b1011 6
b1011 M
15
#220
b1100110 9
b1100111 !
b1100111 o
b1100111 /"
b1100111 '
b1100111 <
b1100111 8
b1010 .
b1010 ;
b1010 P
1)
11
0/
b10100110110000 %
b10100110110000 O
b11 &
b11 l
05
#230
b1011 !
b1011 o
b1011 /"
b1011 '
b1011 <
b1011 8
b1010 9
b1010 "
b1010 =
b1010 n
b1010 ."
b1100111 $
b1100111 m
b1100111 )"
15
#240
b11110101 9
b0 !
b0 o
b0 /"
b0 '
b0 <
b100000000 8
b1010 :
b101 .
b101 ;
b101 P
13
12
1+
0,
0)
0-
b1010010000111 %
b1010010000111 O
b100 &
b100 l
05
#250
b11110110 !
b11110110 o
b11110110 /"
b11110110 '
b11110110 <
b11110110 8
b0 :
b0 (
b0 >
b0 1"
15
#260
b0 9
b0 !
b0 o
b0 /"
b0 '
b0 <
b0 8
b0 .
b0 ;
b0 P
03
02
0+
01
b0 %
b0 O
b101 &
b101 l
05
#270
15
#280
b110 &
b110 l
05
#290
15
#300
b111 &
b111 l
05
#310
15
#320
1,
1-
b100010000 %
b100010000 O
b0 &
b0 l
05
#330
b1100111 "
b1100111 =
b1100111 n
b1100111 ."
b0 $
b0 m
b0 )"
15
#340
b1100111 9
b1101000 !
b1101000 o
b1101000 /"
b1101000 '
b1101000 <
b1101000 8
b1010 .
b1010 ;
b1010 P
1)
11
b10100110110000 %
b10100110110000 O
b1 &
b1 l
05
#350
b0 !
b0 o
b0 /"
b0 '
b0 <
b100000000 8
b11111111 9
b11111111 "
b11111111 =
b11111111 n
b11111111 ."
b1101000 $
b1101000 m
b1101000 )"
15
#360
b0 9
b0 !
b0 o
b0 /"
b0 '
b0 <
b0 8
b0 .
b0 ;
b0 P
0)
01
1/
b1100010000 %
b1100010000 O
b10 &
b10 l
05
#370
0J
0I
1L
b111111 N
b1101000 "
b1101000 =
b1101000 n
b1101000 ."
b0 $
b0 m
b0 )"
b11111111 6
b11111111 M
15
#380
b1101000 9
b1101001 !
b1101001 o
b1101001 /"
b1101001 '
b1101001 <
b1101001 8
b1010 .
b1010 ;
b1010 P
1)
11
0/
b10100110110000 %
b10100110110000 O
b11 &
b11 l
05
#2000
