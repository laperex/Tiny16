$date
	Sun Nov 26 17:40:17 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 8 ! ram_write_bus [7:0] $end
$var wire 8 " ram_read_bus [7:0] $end
$var wire 4 # psr_bus [3:0] $end
$var wire 8 $ mar [7:0] $end
$var wire 15 % decode [14:0] $end
$var wire 4 & counter [3:0] $end
$var wire 8 ' alu_out_bus [7:0] $end
$var wire 8 ( accumulator_bus [7:0] $end
$var wire 1 ) RI $end
$var wire 1 * PS $end
$var wire 1 + PI $end
$var wire 1 , MI $end
$var wire 1 - LS $end
$var wire 4 . L [3:0] $end
$var wire 1 / II $end
$var wire 1 0 ES $end
$var wire 1 1 C_in $end
$var wire 1 2 AS $end
$var wire 1 3 AI $end
$var parameter 32 4 WIDTH $end
$var reg 1 5 clk $end
$var reg 8 6 inst [7:0] $end
$var reg 1 7 reset $end
$scope module alu $end
$var wire 1 5 clk $end
$var wire 1 7 reset $end
$var wire 9 8 tE [8:0] $end
$var wire 8 9 lB [7:0] $end
$var wire 8 : lA [7:0] $end
$var wire 1 * PS $end
$var wire 1 + PI $end
$var wire 1 - LS $end
$var wire 4 ; L [3:0] $end
$var wire 8 < E [7:0] $end
$var wire 1 1 Cn $end
$var wire 8 = B [7:0] $end
$var wire 8 > A [7:0] $end
$var parameter 32 ? WIDTH $end
$var reg 4 @ psr [3:0] $end
$scope begin genblk1[0] $end
$var parameter 2 A i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 B i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 C i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 D i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 E i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 F i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 G i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 H i $end
$upscope $end
$upscope $end
$scope module cu $end
$var wire 1 I TYPE_ABS $end
$var wire 1 J TYPE_IMM $end
$var wire 1 K TYPE_OFF $end
$var wire 1 L TYPE_REG $end
$var wire 1 5 clk $end
$var wire 8 M inst [7:0] $end
$var wire 1 7 reset $end
$var wire 6 N opcode [5:0] $end
$var wire 1 ) cRI $end
$var wire 1 * cPS $end
$var wire 1 + cPI $end
$var wire 1 , cMI $end
$var wire 1 - cLS $end
$var wire 4 O cL [3:0] $end
$var wire 1 / cII $end
$var wire 1 0 cES $end
$var wire 1 1 cCn $end
$var wire 1 2 cAS $end
$var wire 1 3 cAI $end
$var parameter 32 P AI $end
$var parameter 33 Q AS $end
$var parameter 40 R BUF_A $end
$var parameter 40 S BUF_B $end
$var parameter 39 T Cn $end
$var parameter 38 U ES $end
$var parameter 40 V GEN_0 $end
$var parameter 40 W GEN_1 $end
$var parameter 41 X II $end
$var parameter 40 Y LS $end
$var parameter 36 Z MI $end
$var parameter 40 [ NEG_A $end
$var parameter 40 \ NEG_B $end
$var parameter 34 ] PI $end
$var parameter 35 ^ PS $end
$var parameter 37 _ RI $end
$var parameter 6 ` add $end
$var parameter 6 a addc $end
$var parameter 6 b jump $end
$var parameter 6 c jumpc $end
$var parameter 6 d jumpn $end
$var parameter 6 e jumpz $end
$var parameter 6 f load $end
$var parameter 6 g loadi $end
$var parameter 6 h store $end
$var parameter 6 i sub $end
$var parameter 6 j subb $end
$var reg 4 k counter [3:0] $end
$var reg 15 l decode [14:0] $end
$var reg 1 m reset_counter $end
$upscope $end
$scope module ram $end
$var wire 1 , MI $end
$var wire 1 ) RI $end
$var wire 1 5 clk $end
$var wire 8 n mar [7:0] $end
$var wire 8 o read [7:0] $end
$var wire 1 7 reset $end
$var wire 8 p write [7:0] $end
$var parameter 32 q WIDTH $end
$var parameter 38 r abs $end
$var parameter 5 s add $end
$var parameter 5 t addc $end
$var parameter 38 u imm $end
$var parameter 5 v jump $end
$var parameter 5 w jumpc $end
$var parameter 5 x jumpn $end
$var parameter 5 y jumpz $end
$var parameter 5 z load $end
$var parameter 38 { off $end
$var parameter 5 | store $end
$var parameter 5 } sub $end
$var parameter 5 ~ subb $end
$var reg 8 !" mem_addr_reg [7:0] $end
$var integer 32 "" i [31:0] $end
$upscope $end
$scope module rega_mux $end
$var wire 1 5 clk $end
$var wire 1 3 enable $end
$var wire 8 #" in0 [7:0] $end
$var wire 8 $" in1 [7:0] $end
$var wire 1 7 reset $end
$var wire 1 2 sel $end
$var parameter 32 %" WIDTH $end
$var reg 8 &" out [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 %"
b1010 ~
b1011 }
b10 |
b10000000 {
b1 z
b101 y
b111 x
b110 w
b100 v
b0 u
b1001 t
b1000 s
b1000000 r
b1000 q
b1010 j
b1011 i
b10 h
b1 g
b1 f
b101 e
b111 d
b110 c
b100 b
b1001 a
b1000 `
b100000 _
b1000 ^
b100 ]
b1010100000000 \
b110100000000 [
b10000 Z
b100000000 Y
b1000000000 X
b11110100000000 W
b100000000 V
b1000000 U
b10000000 T
b10100100000000 S
b11000100000000 R
b10 Q
b1 P
b111 H
b110 G
b101 F
b100 E
b11 D
b10 C
b1 B
b0 A
b1000 ?
b1000 4
$end
#0
$dumpvars
b0 &"
b0 $"
b1100011 #"
b10000000 ""
b0 !"
b0 p
b1100011 o
b0 n
0m
b0 l
b0 k
b0 O
b0 N
b0 M
0L
0K
1J
0I
b0 @
b0 >
b1100011 =
b0 <
b0 ;
b0 :
b0 9
b0 8
17
b0 6
05
03
02
01
00
0/
b0 .
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b1100011 "
b0 !
$end
#10
07
15
#20
1,
1-
b1 &
b1 k
b100010000 %
b100010000 l
05
#30
15
#40
b1100011 9
b1100100 !
b1100100 p
b1100100 $"
b1100100 '
b1100100 <
b1100100 8
b1010 .
b1010 ;
b1010 O
1)
11
b10 &
b10 k
b10100110110000 %
b10100110110000 l
05
#50
b10 !
b10 p
b10 $"
b10 '
b10 <
b10 8
b1 9
b1 "
b1 =
b1 o
b1 #"
b1100100 $
b1100100 n
b1100100 !"
15
#60
b0 9
b0 !
b0 p
b0 $"
b0 '
b0 <
b0 8
b0 .
b0 ;
b0 O
0)
01
1/
b11 &
b11 k
b1100010000 %
b1100010000 l
05
#70
b1 N
b1100100 "
b1100100 =
b1100100 o
b1100100 #"
b0 $
b0 n
b0 !"
b1 6
b1 M
15
#80
b1100100 9
b1100101 !
b1100101 p
b1100101 $"
b1100101 '
b1100101 <
b1100101 8
b1010 .
b1010 ;
b1010 O
1)
11
0/
b100 &
b100 k
b10100110110000 %
b10100110110000 l
05
#90
b101 !
b101 p
b101 $"
b101 '
b101 <
b101 8
b100 9
b100 "
b100 =
b100 o
b100 #"
b1100101 $
b1100101 n
b1100101 !"
15
#100
b101 &
b101 k
1m
05
#110
b1 !
b1 p
b1 $"
b1 '
b1 <
b1 8
b0 9
b0 "
b0 =
b0 o
b0 #"
b101 $
b101 n
b101 !"
15
#120
b0 !
b0 p
b0 $"
b0 '
b0 <
b0 8
b0 .
b0 ;
b0 O
0,
0)
01
0-
0m
b0 %
b0 l
b0 &
b0 k
05
#130
15
#140
1,
1-
b1 &
b1 k
b100010000 %
b100010000 l
05
#150
b1100101 "
b1100101 =
b1100101 o
b1100101 #"
b0 $
b0 n
b0 !"
15
#160
b1100101 9
b1100110 !
b1100110 p
b1100110 $"
b1100110 '
b1100110 <
b1100110 8
b1010 .
b1010 ;
b1010 O
1)
11
b10 &
b10 k
b10100110110000 %
b10100110110000 l
05
#170
b0 !
b0 p
b0 $"
b0 '
b0 <
b100000000 8
b11111111 9
b11111111 "
b11111111 =
b11111111 o
b11111111 #"
b1100110 $
b1100110 n
b1100110 !"
15
#180
b0 9
b0 !
b0 p
b0 $"
b0 '
b0 <
b0 8
b0 .
b0 ;
b0 O
0)
01
1/
b11 &
b11 k
b1100010000 %
b1100010000 l
05
#190
0J
0I
1L
b111111 N
b1100110 "
b1100110 =
b1100110 o
b1100110 #"
b0 $
b0 n
b0 !"
b11111111 6
b11111111 M
15
#200
b1100110 9
b1100111 !
b1100111 p
b1100111 $"
b1100111 '
b1100111 <
b1100111 8
b1010 .
b1010 ;
b1010 O
1)
11
0/
b100 &
b100 k
b10100110110000 %
b10100110110000 l
05
#2000
